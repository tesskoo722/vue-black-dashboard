{"remainingRequest":"/Users/tesskoo/Desktop/vue-black-dashboard-pro-v1.2.3/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tesskoo/Desktop/vue-black-dashboard-pro-v1.2.3/src/components/BaseButton.vue?vue&type=style&index=0&id=4af0aa13&scoped=true&lang=scss&","dependencies":[{"path":"/Users/tesskoo/Desktop/vue-black-dashboard-pro-v1.2.3/src/components/BaseButton.vue","mtime":1591191507000},{"path":"/Users/tesskoo/Desktop/vue-black-dashboard-pro-v1.2.3/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tesskoo/Desktop/vue-black-dashboard-pro-v1.2.3/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/tesskoo/Desktop/vue-black-dashboard-pro-v1.2.3/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/tesskoo/Desktop/vue-black-dashboard-pro-v1.2.3/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tesskoo/Desktop/vue-black-dashboard-pro-v1.2.3/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tesskoo/Desktop/vue-black-dashboard-pro-v1.2.3/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmJ0biB7CiAgZGlzcGxheTogaW5saW5lLWZsZXg7CiAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKICAvZGVlcC8gaSB7CiAgICBwYWRkaW5nOiAwIDNweDsKICB9Cn0K"},{"version":3,"sources":["BaseButton.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"BaseButton.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <component\n    :is=\"tag\"\n    :type=\"tag === 'button' ? nativeType : ''\"\n    :disabled=\"disabled || loading\"\n    @click=\"handleClick\"\n    class=\"btn\"\n    :class=\"[\n      { 'btn-round': round },\n      { 'btn-block': block },\n      { 'btn-wd': wide },\n      { 'btn-icon btn-fab': icon },\n      { [`btn-${type}`]: type },\n      { [`btn-${size}`]: size },\n      { 'btn-simple': simple },\n      { 'btn-link': link },\n      { disabled: disabled && tag !== 'button' }\n    ]\"\n  >\n    <slot name=\"loading\">\n      <i v-if=\"loading\" class=\"fas fa-spinner fa-spin\"></i>\n    </slot>\n    <slot></slot>\n  </component>\n</template>\n<script>\nexport default {\n  name: 'base-button',\n  props: {\n    tag: {\n      type: String,\n      default: 'button',\n      description: 'Button html tag'\n    },\n    round: Boolean,\n    icon: Boolean,\n    block: Boolean,\n    loading: Boolean,\n    wide: Boolean,\n    disabled: Boolean,\n    type: {\n      type: String,\n      default: 'default',\n      description: 'Button type (primary|secondary|danger etc)'\n    },\n    nativeType: {\n      type: String,\n      default: 'button',\n      description: 'Button native type (e.g button, input etc)'\n    },\n    size: {\n      type: String,\n      default: '',\n      description: 'Button size (sm|lg)'\n    },\n    simple: {\n      type: Boolean,\n      description: 'Whether button is simple (outlined)'\n    },\n    link: {\n      type: Boolean,\n      description: 'Whether button is a link (no borders or background)'\n    }\n  },\n  methods: {\n    handleClick(evt) {\n      this.$emit('click', evt);\n    }\n  }\n};\n</script>\n<style scoped lang=\"scss\">\n.btn {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  /deep/ i {\n    padding: 0 3px;\n  }\n}\n</style>\n"]}]}