{"remainingRequest":"/Users/tesskoo/Desktop/vue-black-dashboard-pro-v1.2.3/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/tesskoo/Desktop/vue-black-dashboard-pro-v1.2.3/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/tesskoo/Desktop/vue-black-dashboard-pro-v1.2.3/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tesskoo/Desktop/vue-black-dashboard-pro-v1.2.3/src/pages/Widgets.vue?vue&type=template&id=399ada3b&","dependencies":[{"path":"/Users/tesskoo/Desktop/vue-black-dashboard-pro-v1.2.3/src/pages/Widgets.vue","mtime":1591191507000},{"path":"/Users/tesskoo/Desktop/vue-black-dashboard-pro-v1.2.3/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tesskoo/Desktop/vue-black-dashboard-pro-v1.2.3/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/tesskoo/Desktop/vue-black-dashboard-pro-v1.2.3/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tesskoo/Desktop/vue-black-dashboard-pro-v1.2.3/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}